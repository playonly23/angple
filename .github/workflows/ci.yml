name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  KOMODO_API_URL: https://komodo.damoang.net

jobs:
  # 코드 품질 검사
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔷 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🎨 Check formatting
        run: npx prettier --check \"**/*.{js,ts,svelte,json,md}\"

      - name: 🔍 Lint TypeScript
        run: npm run lint

      - name: 🔍 Lint Go code
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: services/auth

  # 타입 체크
  type-check:
    name: 📝 Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🏗️ Build packages
        run: npm run build:packages

      - name: 📝 Type check
        run: npm run type-check
        continue-on-error: true

  # 단위 테스트
  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🏗️ Build packages
        run: npm run build:packages

      - name: 🧪 Run tests
        run: npm test
        continue-on-error: true

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Go 서비스 테스트
  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔷 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          go mod tidy
          go mod download

      - name: 🧪 Run tests
        working-directory: services/${{ matrix.service }}
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          REDIS_URL: redis://localhost:6379

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}

  # 통합 테스트
  integration-test:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: 🧪 Run integration tests
        run: |
          echo "Integration tests skipped - no test:integration script"
        continue-on-error: true

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down

  # 빌드 테스트
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔷 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🏗️ Build packages
        run: npm run build:packages

      - name: 🏗️ Build frontend
        run: cd apps/web && npm run build

      - name: 🏗️ Build backend services
        run: |
          for service in auth; do
            cd services/$service
            go build -o bin/$service cmd/main.go
            cd ../..
          done

  # Docker 빌드 (메인 브랜치만)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest

    # needs: [build]  # 테스트용 주석처리
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[docker]')
    
    # OIDC 권한 설정
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        component: [web, admin]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build and push to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ matrix.component }}-latest,${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ matrix.component }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Komodo 배포
  deploy-komodo:
    name: 🚀 Deploy to Komodo
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[deploy]')
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⚙️ Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 🔑 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 🚀 Deploy to Komodo (Optional)
      env:
        IMAGE_TAG: ${{ github.sha }}
        KOMODO_KEY: ${{ secrets.KOMODO_API_KEY }}
        KOMODO_SECRET: ${{ secrets.KOMODO_API_SECRET }}
      run: |
        echo "Triggering Komodo deployment..."
        
        WEB_IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:web-$IMAGE_TAG"
        ADMIN_IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:admin-$IMAGE_TAG"
        
        # Komodo API 호출 (실제 Komodo 설정 후 활성화)
        # curl -X POST "$KOMODO_API_URL/api/deployment/deploy" \
        #   -H "Authorization: Bearer $KOMODO_KEY:$KOMODO_SECRET" \
        #   -H "Content-Type: application/json" \
        #   -d '{
        #     "deployment_id": "damoang-web",
        #     "image": "'$WEB_IMAGE'",
        #     "branch": "'$GITHUB_REF_NAME'"
        #   }'
        
        # curl -X POST "$KOMODO_API_URL/api/deployment/deploy" \
        #   -H "Authorization: Bearer $KOMODO_KEY:$KOMODO_SECRET" \
        #   -H "Content-Type: application/json" \
        #   -d '{
        #     "deployment_id": "damoang-admin", 
        #     "image": "'$ADMIN_IMAGE'",
        #     "branch": "'$GITHUB_REF_NAME'"
        #   }'
        
        echo "✅ Images pushed successfully:"
        echo "- Web: $WEB_IMAGE"
        echo "- Admin: $ADMIN_IMAGE"
        
    - name: 📊 Deployment Summary
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Web Image**: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:web-$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
        echo "- **Admin Image**: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:admin-$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Registry**: ${{ secrets.ECR_REGISTRY }}" >> $GITHUB_STEP_SUMMARY

  # 보안 스캔
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'


  # 성능 테스트 (주간)
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: ⚡ Run load tests
        run: |
          npm install -g artillery
          artillery run tools/performance/load-test.yml 